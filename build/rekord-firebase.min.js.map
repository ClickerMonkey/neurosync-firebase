{"version":3,"sources":["firebase.js"],"names":["global","Rekord","Firebase","undefined","getKey","snapshot","isFunction","key","LiveFactory","database","handleSave","data","val","liveSave","handleRemove","liveRemove","fire","getLiveFirebase","api","on","firebase","save","noop","remove","Rekord_live","call","this","RestFactory","getFirebase","model","createCallback","success","failure","error","clearUndefined","obj","prop","all","onAll","models","isObject","push","onAllError","code","forceOffline","once","get","onGet","onGetError","child","$key","create","encoded","set","update","query","url","Rekord_rest","live","rest","setLive","setRest"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GASA,QAAAC,GAAAC,GAEA,MAAAC,GAAAD,EAAAE,KAAAF,EAAAE,MAAAF,EAAAE,IAGA,QAAAC,GAAAC,GASA,QAAAC,GAAAL,GAEA,GAAAM,GAAAN,EAAAO,MACAL,EAAAH,EAAAC,EAEAI,GAAAI,SAAAN,EAAAI,GAGA,QAAAG,GAAAT,GAEA,GAAAE,GAAAH,EAAAC,EAEAI,GAAAM,WAAAR,GAnBA,GAAAS,GAAAP,EAAAQ,gBAAAR,EAAAQ,gBAAAR,GAAAA,EAAAS,GAEA,OAAAF,IAoBAA,EAAAG,GAAA,cAAAT,GACAM,EAAAG,GAAA,gBAAAT,GACAM,EAAAG,GAAA,gBAAAL,IAGAM,SAAAJ,EACAK,KAAAC,EACAC,OAAAD,IAzBAE,EAAAC,KAAAC,KAAAjB,GA6BA,QAAAkB,GAAAlB,GAOA,QAAAmB,GAAAC,GAEA,MAAApB,GAAAmB,YAAAnB,EAAAmB,YAAAC,EAAApB,GAAAA,EAAAS,IAGA,QAAAY,GAAAC,EAAAC,GAEA,MAAA,UAAAC,GAEAA,EAEAD,KAAAC,GAIAF,OAKA,QAAAG,GAAAC,GAEA,IAAA,GAAAC,KAAAD,GAEAA,EAAAC,KAAAjC,SAEAgC,GAAAC,GA/BA,MAAA3B,GAAAS,KAAAT,EAAAmB,aAsCAA,YAAAA,EAEAS,IAAA,SAAAN,EAAAC,GAOA,QAAAM,GAAAjC,GAEA,GAAAM,GAAAN,EAAAO,MACA2B,IAEA,KAAA,GAAAhC,KAAAI,GACA,CACA,GAAAkB,GAAAlB,EAAAJ,EAEAiC,GAAAX,IAEAU,EAAAE,KAAAZ,GAIAE,EAAAQ,GAGA,QAAAG,GAAAT,GAEAD,KAAAC,EAAAU,MAzBA,MAAA1C,GAAA2C,aAEAZ,KAAA,OA0BAJ,KAAAiB,KAAA,QAAAP,EAAAI,IAGAI,IAAA,SAAAjB,EAAAE,EAAAC,GAOA,QAAAe,GAAA1C,GAEA,GAAAM,GAAAN,EAAAO,KAEAmB,GAAApB,GAGA,QAAAqC,GAAAf,GAEAD,KAAAC,EAAAU,MAdA,MAAA1C,GAAA2C,aAEAZ,KAAA,OAeAJ,GAAAC,GACAoB,MAAApB,EAAAqB,QACAL,KAAA,QAAAE,EAAAC,IAIAG,OAAA,SAAAtB,EAAAuB,EAAArB,EAAAC,GAEA,MAAA/B,GAAA2C,aAEAZ,KAAA,IAGAE,EAAAkB,OAEAxB,GAAAC,GACAoB,MAAApB,EAAAqB,QACAG,IAAAD,EAAAtB,EAAAC,EAAAC,MAIAsB,OAAA,SAAAzB,EAAAuB,EAAArB,EAAAC,GAEA,MAAA/B,GAAA2C,aAEAZ,KAAA,IAGAE,EAAAkB,OAEAxB,GAAAC,GACAoB,MAAApB,EAAAqB,QACAI,OAAAF,EAAAtB,EAAAC,EAAAC,MAIAT,OAAA,SAAAM,EAAAE,EAAAC,GAEA,MAAA/B,GAAA2C,aAEAZ,KAAA,OAGAJ,GAAAC,GACAoB,MAAApB,EAAAqB,QACA3B,OAAAO,EAAAC,EAAAC,KAIAuB,MAAA,SAAAC,EAAAD,EAAAxB,EAAAC,GAEAD,QA7IA0B,EAAAhC,KAAAC,KAAAjB,GAnDA,GAAA+B,GAAAvC,EAAAuC,SACAlC,EAAAL,EAAAK,WACAgB,EAAArB,EAAAqB,KAEAE,EAAAvB,EAAAyD,KACAD,EAAAxD,EAAA0D,IAiMA1D,GAAA2D,QAAApD,GACAP,EAAA4D,QAAAlC,GAEA1B,EAAAC,UACAwD,KAAAlD,EACAmD,KAAAhC,IAGAD,KAAAA,KAAAzB,OAAAyB,KAAAxB","file":"rekord-firebase.min.js","sourcesContent":["(function(global, Rekord, Firebase, undefined)\n{\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var noop = Rekord.noop;\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n\n  function getKey(snapshot)\n  {\n    return isFunction( snapshot.key ) ? snapshot.key() : snapshot.key;\n  }\n\n  function LiveFactory(database)\n  {\n    var fire = database.getLiveFirebase ? database.getLiveFirebase( database ) : database.api;\n\n    if ( !fire )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    function handleSave(snapshot)\n    {\n      var data = snapshot.val();\n      var key = getKey( snapshot );\n\n      database.liveSave( key, data );\n    }\n\n    function handleRemove(snapshot)\n    {\n      var key = getKey( snapshot );\n\n      database.liveRemove( key );\n    }\n\n    fire.on( 'child_added', handleSave );\n    fire.on( 'child_changed', handleSave );\n    fire.on( 'child_removed', handleRemove );\n\n    return {\n      firebase: fire,\n      save: noop,\n      remove: noop\n    };\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api && !database.getFirebase )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    function getFirebase(model)\n    {\n      return database.getFirebase ? database.getFirebase( model, database ) : database.api;\n    }\n\n    function createCallback(success, failure)\n    {\n      return function onOperation(error)\n      {\n        if ( error )\n        {\n          failure( {}, error );\n        }\n        else\n        {\n          success( {} );\n        }\n      };\n    }\n\n    function clearUndefined(obj)\n    {\n      for (var prop in obj)\n      {\n        if ( obj[ prop ] === undefined )\n        {\n          delete obj[ prop ];\n        }\n      }\n    }\n\n    return {\n\n      getFirebase: getFirebase,\n\n      all: function( success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        function onAll(snapshot)\n        {\n          var data = snapshot.val();\n          var models = [];\n\n          for (var key in data)\n          {\n            var model = data[ key ];\n\n            if ( isObject( model ) )\n            {\n              models.push( model );\n            }\n          }\n\n          success( models );\n        }\n\n        function onAllError(error)\n        {\n          failure( [], error.code );\n        }\n\n        getFirebase().once( 'value', onAll, onAllError );\n      },\n\n      get: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        function onGet(snapshot)\n        {\n          var data = snapshot.val();\n\n          success( data );\n        }\n\n        function onGetError(error)\n        {\n          failure( {}, error.code );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .once( 'value', onGet, onGetError )\n        ;\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .set( encoded, createCallback( success, failure ) )\n        ;\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .update( encoded, createCallback( success, failure ) )\n        ;\n      },\n\n      remove: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .remove( createCallback( success, failure ) )\n        ;\n      },\n\n      query: function( url, query, success, failure )\n      {\n        success( [] );\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory );\n  Rekord.setRest( RestFactory );\n\n  Rekord.Firebase = {\n    live: LiveFactory,\n    rest: RestFactory\n  };\n\n})( this, this.Rekord, this.Firebase );\n"],"sourceRoot":"/source/"}