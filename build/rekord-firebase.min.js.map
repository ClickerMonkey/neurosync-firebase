{"version":3,"sources":["rekord-firebase.min.js"],"names":["root","factory","define","amd","Rekord","firebase","module","exports","global","require","Firebase","this","undefined","getKey","snapshot","isFunction","key","LiveFactory","database","handleSave","data","val","liveSave","handleRemove","liveRemove","fire","getLiveFirebase","api","on","save","noop","remove","Rekord_live","call","RestFactory","getFirebase","model","getQueryFirebase","url","isString","child","createOperationCallbackSuccess","success","createOperationCallbackFailure","failure","error","code","createQueryCallbackSuccess","models","isObject","push","createQueryCallbackFailure","clearUndefined","obj","prop","all","forceOffline","once","then","get","onGet","$key","create","encoded","set","update","query","method","args","isArray","i","length","Rekord_rest","live","rest","setLive","setRest"],"mappings":"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","file":"rekord-firebase.min.js","sourcesContent":["/* rekord-firebase 1.4.2 - A rekord binding to firebase - implementing Rekord.rest & Rekord.live by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['Rekord', 'firebase'], function(Rekord, firebase) { // jshint ignore:line\n      return factory(root, Rekord, firebase);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('Rekord'), require('firebase'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord, root.Firebase || root.firebase);\n  }\n}(this, function(global, Rekord, firebase, undefined)\n{\n\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var isArray = Rekord.isArray;\n  var isString = Rekord.isString;\n  var noop = Rekord.noop;\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n\n  function getKey(snapshot)\n  {\n    return isFunction( snapshot.key ) ? snapshot.key() : snapshot.key;\n  }\n\n  function LiveFactory(database)\n  {\n    var fire = database.getLiveFirebase ? database.getLiveFirebase( database ) : database.api;\n\n    if ( !fire )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    function handleSave(snapshot)\n    {\n      var data = snapshot.val();\n      var key = getKey( snapshot );\n\n      database.liveSave( key, data );\n    }\n\n    function handleRemove(snapshot)\n    {\n      var key = getKey( snapshot );\n\n      database.liveRemove( key );\n    }\n\n    fire.on( 'child_added', handleSave );\n    fire.on( 'child_changed', handleSave );\n    fire.on( 'child_removed', handleRemove );\n\n    return {\n      firebase: fire,\n      save: noop,\n      remove: noop\n    };\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api && !database.getFirebase )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    function getFirebase(model)\n    {\n      return database.getFirebase ? database.getFirebase( model, database ) : database.api;\n    }\n\n    function getQueryFirebase(url, data)\n    {\n      return database.getQueryFirebase ? database.getQueryFirebase( url, data ) :\n        ( isString( url ) ? getFirebase().root.child( url ) : getFirebase() );\n    }\n\n    function createOperationCallbackSuccess(success)\n    {\n      return function()\n      {\n        success( {} );\n      };\n    }\n\n    function createOperationCallbackFailure(failure)\n    {\n      return function(error)\n      {\n        failure( {}, error.code );\n      };\n    }\n\n    function createQueryCallbackSuccess(success)\n    {\n      return function(snapshot)\n      {\n        var data = snapshot.val();\n        var models = [];\n\n        for (var key in data)\n        {\n          var model = data[ key ];\n\n          if ( isObject( model ) )\n          {\n            models.push( model );\n          }\n        }\n\n        success( models );\n      };\n    }\n\n    function createQueryCallbackFailure(failure)\n    {\n      return function(error)\n      {\n        failure( [], error.code );\n      };\n    }\n\n    function clearUndefined(obj)\n    {\n      for (var prop in obj)\n      {\n        if ( obj[ prop ] === undefined )\n        {\n          delete obj[ prop ];\n        }\n      }\n    }\n\n    return {\n\n      getFirebase: getFirebase,\n      getQueryFirebase: getQueryFirebase,\n\n      all: function( success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        getFirebase()\n          .once( 'value' )\n          .then( createQueryCallbackSuccess( success ) )\n          .catch( createQueryCallbackFailure( failure ) )\n        ;\n      },\n\n      get: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        function onGet(snapshot)\n        {\n          var data = snapshot.val();\n\n          success( data );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .once( 'value' )\n          .then( onGet )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .set( encoded )\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .update( encoded )\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      remove: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .remove()\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      query: function( url, data, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        var query = getQueryFirebase( url, data );\n\n        if ( isObject( data ) )\n        {\n          for (var method in data)\n          {\n            var args = data[ method ];\n\n            if ( isArray( args ) )\n            {\n              for (var i = 0; i < args.length; i++)\n              {\n                query[ method ]( args[ i ] );\n              }\n            }\n            else\n            {\n              query[ method ]( args );\n            }\n          }\n        }\n        else if ( isFunction( data ) )\n        {\n          data( query );\n        }\n\n        query\n          .once( 'value' )\n          .then( createQueryCallbackSuccess( success ) )\n          .catch( createQueryCallbackFailure( failure ) )\n        ;\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory );\n  Rekord.setRest( RestFactory );\n\n  Rekord.Firebase = {\n    live: LiveFactory,\n    rest: RestFactory\n  };\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}