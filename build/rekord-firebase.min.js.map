{"version":3,"sources":["firebase.js"],"names":["global","Rekord","firebase","undefined","getKey","snapshot","isFunction","key","LiveFactory","database","handleSave","data","val","liveSave","handleRemove","liveRemove","fire","getLiveFirebase","api","on","save","noop","remove","Rekord_live","call","this","RestFactory","getFirebase","model","getQueryFirebase","url","isString","ref","createOperationCallbackSuccess","success","createOperationCallbackFailure","failure","error","code","createQueryCallbackSuccess","models","isObject","push","createQueryCallbackFailure","clearUndefined","obj","prop","all","forceOffline","once","then","get","onGet","child","$key","create","encoded","set","update","query","method","args","isArray","i","length","Rekord_rest","live","rest","setLive","setRest","Firebase"],"mappings":"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","file":"rekord-firebase.min.js","sourcesContent":["(function(global, Rekord, firebase, undefined)\n{\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var isArray = Rekord.isArray;\n  var isString = Rekord.isString;\n  var noop = Rekord.noop;\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n\n  function getKey(snapshot)\n  {\n    return isFunction( snapshot.key ) ? snapshot.key() : snapshot.key;\n  }\n\n  function LiveFactory(database)\n  {\n    var fire = database.getLiveFirebase ? database.getLiveFirebase( database ) : database.api;\n\n    if ( !fire )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    function handleSave(snapshot)\n    {\n      var data = snapshot.val();\n      var key = getKey( snapshot );\n\n      database.liveSave( key, data );\n    }\n\n    function handleRemove(snapshot)\n    {\n      var key = getKey( snapshot );\n\n      database.liveRemove( key );\n    }\n\n    fire.on( 'child_added', handleSave );\n    fire.on( 'child_changed', handleSave );\n    fire.on( 'child_removed', handleRemove );\n\n    return {\n      firebase: fire,\n      save: noop,\n      remove: noop\n    };\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api && !database.getFirebase )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    function getFirebase(model)\n    {\n      return database.getFirebase ? database.getFirebase( model, database ) : database.api;\n    }\n\n    function getQueryFirebase(url)\n    {\n      return database.getQueryFirebase ? database.getQueryFirebase( url ) :\n        ( isString( url ) ? firebase.database().ref( url ) : getFirebase() );\n    }\n\n    function createOperationCallbackSuccess(success)\n    {\n      return function()\n      {\n        success( {} );\n      };\n    }\n\n    function createOperationCallbackFailure(failure)\n    {\n      return function(error)\n      {\n        failure( {}, error.code );\n      };\n    }\n\n    function createQueryCallbackSuccess(success)\n    {\n      return function(snapshot)\n      {\n        var data = snapshot.val();\n        var models = [];\n\n        for (var key in data)\n        {\n          var model = data[ key ];\n\n          if ( isObject( model ) )\n          {\n            models.push( model );\n          }\n        }\n\n        success( models );\n      };\n    }\n\n    function createQueryCallbackFailure(failure)\n    {\n      return function(error)\n      {\n        failure( [], error.code );\n      };\n    }\n\n    function clearUndefined(obj)\n    {\n      for (var prop in obj)\n      {\n        if ( obj[ prop ] === undefined )\n        {\n          delete obj[ prop ];\n        }\n      }\n    }\n\n    return {\n\n      getFirebase: getFirebase,\n      getQueryFirebase: getQueryFirebase,\n\n      all: function( success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        getFirebase()\n          .once( 'value' )\n          .then( createQueryCallbackSuccess( success ) )\n          .catch( createQueryCallbackFailure( failure ) )\n        ;\n      },\n\n      get: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        function onGet(snapshot)\n        {\n          var data = snapshot.val();\n\n          success( data );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .once( 'value' )\n          .then( onGet )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .set( encoded )\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .update( encoded )\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      remove: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .remove()\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      query: function( url, data, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        var query = getQueryFirebase( url );\n\n        if ( isObject( data ) )\n        {\n          for (var method in data)\n          {\n            var args = data[ method ];\n\n            if ( isArray( args ) )\n            {\n              for (var i = 0; i < args.length; i++)\n              {\n                query[ method ]( args[ i ] );\n              }\n            }\n            else\n            {\n              query[ method ]( args );\n            }\n          }\n        }\n        else if ( isFunction( data ) )\n        {\n          data( query );\n        }\n\n        query\n          .once( 'value' )\n          .then( createQueryCallbackSuccess( success ) )\n          .catch( createQueryCallbackFailure( failure ) )\n        ;\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory );\n  Rekord.setRest( RestFactory );\n\n  Rekord.Firebase = {\n    live: LiveFactory,\n    rest: RestFactory\n  };\n\n})( this, this.Rekord, this.Firebase || this.firebase );\n"],"sourceRoot":"/source/"}