{"version":3,"sources":["firebase.js"],"names":["global","Rekord","Firebase","undefined","firebase","url","cache","LiveFactory","database","handleSave","snapshot","data","val","key","liveSave","handleRemove","liveRemove","api","Rekord_live","call","this","fire","on","save","noop","remove","RestFactory","createCallback","success","failure","error","clearUndefined","obj","prop","Rekord_rest","all","onAll","models","model","isObject","push","onAllError","code","forceOffline","once","get","onGet","onGetError","child","$key","create","encoded","set","update","query","live","rest","setLive","setRest"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAUA,QAAAC,GAAAC,GAEA,MAAAA,KAAAC,GAAAA,EAAAD,GAAAC,EAAAD,GAAA,GAAAH,GAAAG,GAGA,QAAAE,GAAAC,GASA,QAAAC,GAAAC,GAEA,GAAAC,GAAAD,EAAAE,MACAC,EAAAH,EAAAG,KAEAL,GAAAM,SAAAD,EAAAF,GAGA,QAAAI,GAAAL,GAEA,GACAG,IADAH,EAAAE,MACAF,EAAAG,MAEAL,GAAAQ,WAAAH,GApBA,IAAAL,EAAAS,IAEA,MAAAC,GAAAC,KAAAC,KAAAZ,EAGA,IAAAa,GAAAb,EAAAS,GAsBA,OAJAI,GAAAC,GAAA,cAAAb,GACAY,EAAAC,GAAA,gBAAAb,GACAY,EAAAC,GAAA,gBAAAP,IAGAX,SAAAiB,EACAE,KAAAC,EACAC,OAAAD,GAIA,QAAAE,GAAAlB,GASA,QAAAmB,GAAAC,EAAAC,GAEA,MAAA,UAAAC,GAEAA,EAEAD,KAAAC,GAIAF,OAKA,QAAAG,GAAAC,GAEA,IAAA,GAAAC,KAAAD,GAEAA,EAAAC,KAAA9B,SAEA6B,GAAAC,GA5BA,IAAAzB,EAAAS,IAEA,MAAAiB,GAAAf,KAAAC,KAAAZ,EAGA,IAAAa,GAAAb,EAAAS,GA4BA,QAEAb,SAAAiB,EAEAc,IAAA,SAAAP,EAAAC,GAOA,QAAAO,GAAA1B,GAEA,GAAAC,GAAAD,EAAAE,MACAyB,IAEA,KAAA,GAAAxB,KAAAF,GACA,CACA,GAAA2B,GAAA3B,EAAAE,EAEA0B,GAAAD,IAEAD,EAAAG,KAAAF,GAIAV,EAAAS,GAGA,QAAAI,GAAAX,GAEAD,KAAAC,EAAAY,MAzBA,MAAAzC,GAAA0C,aAEAd,KAAA,OA0BAR,GAAAuB,KAAA,QAAAR,EAAAK,IAGAI,IAAA,SAAAP,EAAAV,EAAAC,GAOA,QAAAiB,GAAApC,GAEA,GAAAC,GAAAD,EAAAE,KAEAgB,GAAAjB,GAGA,QAAAoC,GAAAjB,GAEAD,KAAAC,EAAAY,MAdA,MAAAzC,GAAA0C,aAEAd,KAAA,OAeAR,GAAA2B,MAAAV,EAAAW,QAAAL,KAAA,QAAAE,EAAAC,IAGAG,OAAA,SAAAZ,EAAAa,EAAAvB,EAAAC,GAEA,MAAA5B,GAAA0C,aAEAd,KAAA,IAGAE,EAAAoB,OAEA9B,GAAA2B,MAAAV,EAAAW,QAAAG,IAAAD,EAAAxB,EAAAC,EAAAC,MAGAwB,OAAA,SAAAf,EAAAa,EAAAvB,EAAAC,GAEA,MAAA5B,GAAA0C,aAEAd,KAAA,IAGAE,EAAAoB,OAEA9B,GAAA2B,MAAAV,EAAAW,QAAAI,OAAAF,EAAAxB,EAAAC,EAAAC,MAGAJ,OAAA,SAAAa,EAAAV,EAAAC,GAEA,MAAA5B,GAAA0C,aAEAd,KAAA,OAGAR,GAAA2B,MAAAV,EAAAW,QAAAxB,OAAAE,EAAAC,EAAAC,KAGAyB,MAAA,SAAAjD,EAAAiD,EAAA1B,EAAAC,GAEAD,QAnLA,GAAAW,GAAAtC,EAAAsC,SACAf,EAAAvB,EAAAuB,KAEAlB,KAEAY,EAAAjB,EAAAsD,KACArB,EAAAjC,EAAAuD,IAmLAvD,GAAAG,SAAAA,EACAH,EAAAwD,QAAAlD,GACAN,EAAAyD,QAAAhC,IAEAN,KAAAA,KAAAnB,OAAAmB,KAAAlB","file":"rekord-firebase.min.js","sourcesContent":["(function(global, Rekord, Firebase, undefined)\n{\n  var isObject = Rekord.isObject;\n  var noop = Rekord.noop;\n\n  var cache = {};\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n\n  function firebase(url)\n  {\n    return url in cache ? cache[ url ] : cache[ url ] = new Firebase( url );\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    var fire = database.api;\n\n    function handleSave(snapshot)\n    {\n      var data = snapshot.val();\n      var key = snapshot.key();\n\n      database.liveSave( key, data );\n    }\n\n    function handleRemove(snapshot)\n    {\n      var data = snapshot.val();\n      var key = snapshot.key();\n\n      database.liveRemove( key );\n    }\n\n    fire.on( 'child_added', handleSave );\n    fire.on( 'child_changed', handleSave );\n    fire.on( 'child_removed', handleRemove );\n\n    return {\n      firebase: fire,\n      save: noop,\n      remove: noop\n    };\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    var fire = database.api;\n\n    function createCallback(success, failure)\n    {\n      return function onOperation(error)\n      {\n        if ( error )\n        {\n          failure( {}, error );\n        }\n        else\n        {\n          success( {} );\n        }\n      };\n    }\n\n    function clearUndefined(obj)\n    {\n      for (var prop in obj)\n      {\n        if ( obj[ prop ] === undefined )\n        {\n          delete obj[ prop ];\n        }\n      }\n    }\n\n    return {\n\n      firebase: fire,\n\n      all: function( success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        function onAll(snapshot)\n        {\n          var data = snapshot.val();\n          var models = [];\n\n          for (var key in data)\n          {\n            var model = data[ key ];\n\n            if ( isObject( model ) )\n            {\n              models.push( model );\n            }\n          }\n\n          success( models );\n        }\n\n        function onAllError(error)\n        {\n          failure( [], error.code );\n        }\n\n        fire.once( 'value', onAll, onAllError );\n      },\n\n      get: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        function onGet(snapshot)\n        {\n          var data = snapshot.val();\n\n          success( data );\n        }\n\n        function onGetError(error)\n        {\n          failure( {}, error.code );\n        }\n\n        fire.child( model.$key() ).once( 'value', onGet, onGetError );\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        fire.child( model.$key() ).set( encoded, createCallback( success, failure ) );\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        fire.child( model.$key() ).update( encoded, createCallback( success, failure ) );\n      },\n\n      remove: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        fire.child( model.$key() ).remove( createCallback( success, failure ) );\n      },\n\n      query: function( url, query, success, failure )\n      {\n        success( [] );\n      }\n\n    };\n  }\n\n  Rekord.firebase = firebase;\n  Rekord.setLive( LiveFactory );\n  Rekord.setRest( RestFactory );\n\n})( this, this.Rekord, this.Firebase );\n"],"sourceRoot":"/source/"}