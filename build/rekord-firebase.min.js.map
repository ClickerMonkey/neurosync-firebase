{"version":3,"sources":["rekord-firebase.min.js"],"names":["global","Rekord","firebase","undefined","getKey","snapshot","isFunction","key","LiveFactory","database","handleSave","data","val","liveSave","handleRemove","liveRemove","fire","getLiveFirebase","api","on","save","noop","remove","Rekord_live","call","this","RestFactory","getFirebase","model","getQueryFirebase","url","isString","root","child","createOperationCallbackSuccess","success","createOperationCallbackFailure","failure","error","code","createQueryCallbackSuccess","models","isObject","push","createQueryCallbackFailure","clearUndefined","obj","prop","all","forceOffline","once","then","get","onGet","$key","create","encoded","set","update","query","method","args","isArray","i","length","Rekord_rest","live","rest","setLive","setRest","Firebase"],"mappings":"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","file":"rekord-firebase.min.js","sourcesContent":["(function(global, Rekord, firebase, undefined)\n{\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var isArray = Rekord.isArray;\n  var isString = Rekord.isString;\n  var noop = Rekord.noop;\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n\n  function getKey(snapshot)\n  {\n    return isFunction( snapshot.key ) ? snapshot.key() : snapshot.key;\n  }\n\n  function LiveFactory(database)\n  {\n    var fire = database.getLiveFirebase ? database.getLiveFirebase( database ) : database.api;\n\n    if ( !fire )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    function handleSave(snapshot)\n    {\n      var data = snapshot.val();\n      var key = getKey( snapshot );\n\n      database.liveSave( key, data );\n    }\n\n    function handleRemove(snapshot)\n    {\n      var key = getKey( snapshot );\n\n      database.liveRemove( key );\n    }\n\n    fire.on( 'child_added', handleSave );\n    fire.on( 'child_changed', handleSave );\n    fire.on( 'child_removed', handleRemove );\n\n    return {\n      firebase: fire,\n      save: noop,\n      remove: noop\n    };\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api && !database.getFirebase )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    function getFirebase(model)\n    {\n      return database.getFirebase ? database.getFirebase( model, database ) : database.api;\n    }\n\n    function getQueryFirebase(url)\n    {\n      return database.getQueryFirebase ? database.getQueryFirebase( url ) :\n        ( isString( url ) ? getFirebase().root.child( url ) : getFirebase() );\n    }\n\n    function createOperationCallbackSuccess(success)\n    {\n      return function()\n      {\n        success( {} );\n      };\n    }\n\n    function createOperationCallbackFailure(failure)\n    {\n      return function(error)\n      {\n        failure( {}, error.code );\n      };\n    }\n\n    function createQueryCallbackSuccess(success)\n    {\n      return function(snapshot)\n      {\n        var data = snapshot.val();\n        var models = [];\n\n        for (var key in data)\n        {\n          var model = data[ key ];\n\n          if ( isObject( model ) )\n          {\n            models.push( model );\n          }\n        }\n\n        success( models );\n      };\n    }\n\n    function createQueryCallbackFailure(failure)\n    {\n      return function(error)\n      {\n        failure( [], error.code );\n      };\n    }\n\n    function clearUndefined(obj)\n    {\n      for (var prop in obj)\n      {\n        if ( obj[ prop ] === undefined )\n        {\n          delete obj[ prop ];\n        }\n      }\n    }\n\n    return {\n\n      getFirebase: getFirebase,\n      getQueryFirebase: getQueryFirebase,\n\n      all: function( success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        getFirebase()\n          .once( 'value' )\n          .then( createQueryCallbackSuccess( success ) )\n          .catch( createQueryCallbackFailure( failure ) )\n        ;\n      },\n\n      get: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        function onGet(snapshot)\n        {\n          var data = snapshot.val();\n\n          success( data );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .once( 'value' )\n          .then( onGet )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .set( encoded )\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        getFirebase( model )\n          .child( model.$key() )\n          .update( encoded )\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      remove: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        getFirebase( model )\n          .child( model.$key() )\n          .remove()\n          .then( createOperationCallbackSuccess( success ) )\n          .catch( createOperationCallbackFailure( failure ) )\n        ;\n      },\n\n      query: function( url, data, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        var query = getQueryFirebase( url );\n\n        if ( isObject( data ) )\n        {\n          for (var method in data)\n          {\n            var args = data[ method ];\n\n            if ( isArray( args ) )\n            {\n              for (var i = 0; i < args.length; i++)\n              {\n                query[ method ]( args[ i ] );\n              }\n            }\n            else\n            {\n              query[ method ]( args );\n            }\n          }\n        }\n        else if ( isFunction( data ) )\n        {\n          data( query );\n        }\n\n        query\n          .once( 'value' )\n          .then( createQueryCallbackSuccess( success ) )\n          .catch( createQueryCallbackFailure( failure ) )\n        ;\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory );\n  Rekord.setRest( RestFactory );\n\n  Rekord.Firebase = {\n    live: LiveFactory,\n    rest: RestFactory\n  };\n\n})( this, this.Rekord, this.Firebase || this.firebase );\n"],"sourceRoot":"/source/"}