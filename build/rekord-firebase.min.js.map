{"version":3,"sources":["firebase.js"],"names":["global","Rekord","Firebase","undefined","LiveFactory","database","handleSave","snapshot","data","val","key","isFunction","liveSave","handleRemove","liveRemove","api","Rekord_live","call","this","fire","on","firebase","save","noop","remove","RestFactory","createCallback","success","failure","error","clearUndefined","obj","prop","Rekord_rest","all","onAll","models","model","isObject","push","onAllError","code","forceOffline","once","get","onGet","onGetError","child","$key","create","encoded","set","update","query","url","live","rest","setLive","setRest"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GASA,QAAAC,GAAAC,GASA,QAAAC,GAAAC,GAEA,GAAAC,GAAAD,EAAAE,MACAC,EAAAC,EAAAJ,EAAAG,KAAAH,EAAAG,MAAAH,EAAAG,GAEAL,GAAAO,SAAAF,EAAAF,GAGA,QAAAK,GAAAN,GAEA,GACAG,IADAH,EAAAE,MACAE,EAAAJ,EAAAG,KAAAH,EAAAG,MAAAH,EAAAG,IAEAL,GAAAS,WAAAJ,GApBA,IAAAL,EAAAU,IAEA,MAAAC,GAAAC,KAAAC,KAAAb,EAGA,IAAAc,GAAAd,EAAAU,GAsBA,OAJAI,GAAAC,GAAA,cAAAd,GACAa,EAAAC,GAAA,gBAAAd,GACAa,EAAAC,GAAA,gBAAAP,IAGAQ,SAAAF,EACAG,KAAAC,EACAC,OAAAD,GAIA,QAAAE,GAAApB,GASA,QAAAqB,GAAAC,EAAAC,GAEA,MAAA,UAAAC,GAEAA,EAEAD,KAAAC,GAIAF,OAKA,QAAAG,GAAAC,GAEA,IAAA,GAAAC,KAAAD,GAEAA,EAAAC,KAAA7B,SAEA4B,GAAAC,GA5BA,IAAA3B,EAAAU,IAEA,MAAAkB,GAAAhB,KAAAC,KAAAb,EAGA,IAAAc,GAAAd,EAAAU,GA4BA,QAEAM,SAAAF,EAEAe,IAAA,SAAAP,EAAAC,GAOA,QAAAO,GAAA5B,GAEA,GAAAC,GAAAD,EAAAE,MACA2B,IAEA,KAAA,GAAA1B,KAAAF,GACA,CACA,GAAA6B,GAAA7B,EAAAE,EAEA4B,GAAAD,IAEAD,EAAAG,KAAAF,GAIAV,EAAAS,GAGA,QAAAI,GAAAX,GAEAD,KAAAC,EAAAY,MAzBA,MAAAxC,GAAAyC,aAEAd,KAAA,OA0BAT,GAAAwB,KAAA,QAAAR,EAAAK,IAGAI,IAAA,SAAAP,EAAAV,EAAAC,GAOA,QAAAiB,GAAAtC,GAEA,GAAAC,GAAAD,EAAAE,KAEAkB,GAAAnB,GAGA,QAAAsC,GAAAjB,GAEAD,KAAAC,EAAAY,MAdA,MAAAxC,GAAAyC,aAEAd,KAAA,OAeAT,GAAA4B,MAAAV,EAAAW,QAAAL,KAAA,QAAAE,EAAAC,IAGAG,OAAA,SAAAZ,EAAAa,EAAAvB,EAAAC,GAEA,MAAA3B,GAAAyC,aAEAd,KAAA,IAGAE,EAAAoB,OAEA/B,GAAA4B,MAAAV,EAAAW,QAAAG,IAAAD,EAAAxB,EAAAC,EAAAC,MAGAwB,OAAA,SAAAf,EAAAa,EAAAvB,EAAAC,GAEA,MAAA3B,GAAAyC,aAEAd,KAAA,IAGAE,EAAAoB,OAEA/B,GAAA4B,MAAAV,EAAAW,QAAAI,OAAAF,EAAAxB,EAAAC,EAAAC,MAGAJ,OAAA,SAAAa,EAAAV,EAAAC,GAEA,MAAA3B,GAAAyC,aAEAd,KAAA,OAGAT,GAAA4B,MAAAV,EAAAW,QAAAxB,OAAAE,EAAAC,EAAAC,KAGAyB,MAAA,SAAAC,EAAAD,EAAA1B,EAAAC,GAEAD,QA7KA,GAAAW,GAAArC,EAAAqC,SACA3B,EAAAV,EAAAU,WACAY,EAAAtB,EAAAsB,KAEAP,EAAAf,EAAAsD,KACAtB,EAAAhC,EAAAuD,IA8KAvD,GAAAwD,QAAArD,GACAH,EAAAyD,QAAAjC,IAEAP,KAAAA,KAAAjB,OAAAiB,KAAAhB","file":"rekord-firebase.min.js","sourcesContent":["(function(global, Rekord, Firebase, undefined)\n{\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var noop = Rekord.noop;\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n\n  function LiveFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    var fire = database.api;\n\n    function handleSave(snapshot)\n    {\n      var data = snapshot.val();\n      var key = isFunction( snapshot.key ) ? snapshot.key() : snapshot.key;\n\n      database.liveSave( key, data );\n    }\n\n    function handleRemove(snapshot)\n    {\n      var data = snapshot.val();\n      var key = isFunction( snapshot.key ) ? snapshot.key() : snapshot.key;\n\n      database.liveRemove( key );\n    }\n\n    fire.on( 'child_added', handleSave );\n    fire.on( 'child_changed', handleSave );\n    fire.on( 'child_removed', handleRemove );\n\n    return {\n      firebase: fire,\n      save: noop,\n      remove: noop\n    };\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    var fire = database.api;\n\n    function createCallback(success, failure)\n    {\n      return function onOperation(error)\n      {\n        if ( error )\n        {\n          failure( {}, error );\n        }\n        else\n        {\n          success( {} );\n        }\n      };\n    }\n\n    function clearUndefined(obj)\n    {\n      for (var prop in obj)\n      {\n        if ( obj[ prop ] === undefined )\n        {\n          delete obj[ prop ];\n        }\n      }\n    }\n\n    return {\n\n      firebase: fire,\n\n      all: function( success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( [], 0 );\n        }\n\n        function onAll(snapshot)\n        {\n          var data = snapshot.val();\n          var models = [];\n\n          for (var key in data)\n          {\n            var model = data[ key ];\n\n            if ( isObject( model ) )\n            {\n              models.push( model );\n            }\n          }\n\n          success( models );\n        }\n\n        function onAllError(error)\n        {\n          failure( [], error.code );\n        }\n\n        fire.once( 'value', onAll, onAllError );\n      },\n\n      get: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        function onGet(snapshot)\n        {\n          var data = snapshot.val();\n\n          success( data );\n        }\n\n        function onGetError(error)\n        {\n          failure( {}, error.code );\n        }\n\n        fire.child( model.$key() ).once( 'value', onGet, onGetError );\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        fire.child( model.$key() ).set( encoded, createCallback( success, failure ) );\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        clearUndefined( encoded );\n\n        fire.child( model.$key() ).update( encoded, createCallback( success, failure ) );\n      },\n\n      remove: function( model, success, failure )\n      {\n        if ( Rekord.forceOffline )\n        {\n          return failure( {}, 0 );\n        }\n\n        fire.child( model.$key() ).remove( createCallback( success, failure ) );\n      },\n\n      query: function( url, query, success, failure )\n      {\n        success( [] );\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory );\n  Rekord.setRest( RestFactory );\n\n})( this, this.Rekord, this.Firebase );\n"],"sourceRoot":"/source/"}